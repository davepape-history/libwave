libwave - Wavefront/GL rendering library
 Version 1.3.3
 1 November 1995
 Dave Pape (pape@evl.eecs.uic.edu)


Functions:

wfObject * wfReadObject(char * filename)
  Reads the obj file <filename> and stores all the geometry, material,
and texture data in a wfObject structure. A pointer to the structure is
returned; this pointer should be passed to wfDrawObject() to render the
object. All associated files (material & texture libraries) should be in
the current directory, or have their full path included in the obj file.


void wfDrawObject(wfObject * object)
  Renders the object using GL. wfInitObject() will be called automatically
if the object has not already been initialized. 


void wfInitObject(wfObject * object)
  Initializes the GL data for an object - ie defines any materials or
textures that the object uses. This normally does not need to be called
directly by an application; however, if the object is stored in shared
memory (via wfSetMemoryAllocator()) and is used in multiple processes
(as in the CAVE), this *should* be called directly, to make sure that all
processes do the initialization.


void wfGetBoundingSphere(wfObject *obj,wfVertex center,float *radius)
  Returns a bounding sphere for an object, in the form of a center point
and a radius. The sphere's center is the average of all the vertices in
the object; the radius is the distance from the center to the farthest
vertex.


void wfGetBoundingBox(wfObject *obj,wfVertex corner0,wfVertex corner1)
  Returns an axis-aligned bounding box for an object. <corner0> is the
minimum X, Y, and Z coordinates of the object's vertices; <corner1> is
the maximum X, Y, and Z coordinates.


void wfSetMemoryAllocator(void * (*allocfn)(size_t),void (*freefn)(void *))
  Defines the memory allocation and de-allocation functions which will be
used by wfReadObject when creating an object. The default functions are
malloc() and free(). This can be used to make objects be stored in shared
memory.


void wfSetNewIDFunction(int (*newidfn)(void))
  Defines the function which the library will call to obtain unique
material and texture IDs. An internally provided function is used by
default. If you have some function that is used by other drawing
routines to select IDs, this can be used to have the library call that
same function and thus prevent ID collisions.


void wfWriteObject(FILE *fp,wfObject *obj)
  Writes an object to a file. 'fp' should be a pointer to a file opened
for writing; 'obj' is a pointer to the object. The vertices, normals,
texture vertices, faces, lines, mtllib/usemtl, and maplib/usemap entries
will be written; all other parts of the original obj file (comments,
groups, etc) are not stored in the wfObject structure.


void wfEnable(int id)
void wfDisable(int id)
  Enables or disables certain features. Possible values for 'id' and their
meanings are:
	WF_SHOW_DEFINED_TEXTURES  -  When textures are defined during an
		objects initialization, the images are lrectwritten to
		the framebuffer. You will probably want to use frontbuffer(TRUE)
		when an object is initialized with this feature.
		Disabled by default.
	WF_USE_TEXTURES  -  Whether or not to define & bind textures for objects.
		This can be toggled at any time during execution, but if it will
		be enabled, you should make sure that it is enabled when objects
		are initialized.
		Enabled by default.
	WF_INCLUDE_ALL_PARTS  -  Whether unsupported .obj elements should
		be included in the 'parts' list of an object that is read.
		This is mainly intended for programs which will use
		wfWriteObject() and want all the object parts written back
		out correctly.
		Disabled by default.

int wfIsEnabled(int id)
  Returns the current state (0 or 1) of a feature controlled by wfEnable() /
wfDisable().


Notes:
 Wavefront texture maps are not supported. Instead, all texture maps are
assumed to be SGI format images; if a filename ending in ".tex" is read
in a map specification, the ".tex" is replaced by ".sgi". Ambient,
specular, and bump maps are not supported; only diffuse & dissolve maps are.
Scaling of texture maps is supported via the -mm flag, but this is a recent
addition, and I no longer have access to Wavefront for comparison, so the
implementation may not match how it actually works in Wavefront.

 Rendering an object (in wfDrawObject()) involves stepping through a linked
list of the geometry and other data; putting the wfDrawObject call into a GL
object (see makeobj()) can give a big win in rendering speed.

 wfReadObject() calls strtok() to parse lines in the obj file. This may
cause a conflict if your code also uses strtok() while calling wfReadObject().


--------------------------------------------------------------------------
Changes:

Version 1.3.2:
  Added wfEnable()/wfDisable() features

Version 1.3.1:
  Added app_data element to wfObject
  Corrected maplib & usemap output of wfWriteObject()
  Optimized texture definition (a given image will only be texdef'ed once)
  Optimized wfDrawObject() to reduce unnecessary GL calls	
		(e.g. redundant normals)

Version 1.3:
  Added wfMaterialLib & wfTextureLib 'parts'
  Added wfWriteObject()

Version 1.2.1:
  Added error checks for failed memory allocation.

Version 1.2:
  Added support for relative indexing of vertices, normals, and texture
vertices (e.g. vertex number -1).

Version 1.1:
  Replaced use of dpNewID() by wfNewID(). Added wfSetNewIDFunction().
